buildscript {
    apply from: 'versions.gradle'

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
    }
}

allprojects {

    group 'com.github.jasync-sql'
    //version '0.8.39-netty4.0'
    version '0.8.39'

    repositories {
        mavenCentral()
        jcenter()
    }
    apply plugin: 'kotlin'
    apply plugin: 'maven-publish'
    apply plugin: "jacoco"
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    kotlin {
        experimental {
        }
    }
    compileKotlin {
        kotlinOptions.suppressWarnings = true
        kotlinOptions.jvmTarget = 1.8
    }
    //to make sure also tests are compiled in 1.8 https://stackoverflow.com/questions/48988778/cannot-inline-bytecode-built-with-jvm-target-1-8-into-bytecode-that-is-being-bui
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
}
subprojects {
    apply plugin: 'com.jfrog.bintray'

    configurations {
        ktlint
    }
    dependencies {
        ktlint "com.github.shyiko:ktlint:0.29.0"
    }
    task ktlint(type: JavaExec, group: "verification") {
        description = "Check Kotlin code style."
        main = "com.github.shyiko.ktlint.Main"
        classpath = configurations.ktlint
        args "src/**/*.kt"
        // to generate report in checkstyle format prepend following args:
        // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
        // see https://github.com/shyiko/ktlint#usage for more
    }

    //    check.dependsOn ktlint

    task ktlintFormat(type: JavaExec, group: "formatting") {
        description = "Fix Kotlin code style deviations."
        main = "com.github.shyiko.ktlint.Main"
        classpath = configurations.ktlint
        args "-F", "src/**/*.kt"
    }
    
    def varintName = "jasync-sql-unknown"

    if (project.name == "db-async-common") {
        varintName = "jasync-common"
    }
    if (project.name == "mysql-async") {
        varintName = "jasync-mysql"
    }
    if (project.name == "postgresql-async") {
        varintName = "jasync-postgresql"
    }

    afterEvaluate {
        task sourceJar(type: Jar, dependsOn: classes) {
            classifier 'sources'
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }
    }

    tasks.withType(Jar) {
        archivesBaseName = varintName
    }


    // Create the pom configuration:
    def pomConfig = {
        licenses {
            license {
                name "The Apache Software License, Version 2.0"
                url "http://www.apache.org/licenses/LICENSE-2.0.txt"
                distribution "repo"
            }
        }
        developers {
            developer {
                name "Ohad Shai"
                email "ohadshai@gmail.com"
                organization "github"
                organizationUrl "http://www.github.com"
            }
        }

        scm {
            url "https://github.com/jasync-sql/jasync-sql"
        }
    }

    publishing {
        publications {
            mavenProject(MavenPublication) {
                from components.java
                artifact sourceJar {
                    classifier "sources"
                }
                artifact javadocJar {
                    classifier "javadoc"
                }
                groupId project.group
                artifactId varintName
                version project.version
                pom.withXml {
                    def root = asNode()
                    root.appendNode('description', 'jasync-sql - Async, Netty based, JVM database drivers for PostgreSQL and MySQL written in Kotlin')
                    root.appendNode('name', 'jasync-sql')
                    root.appendNode('url', 'https://github.com/jasync-sql/jasync-sql')
                    root.children().last() + pomConfig
                }
            }
        }
    }

    bintray {
        user = 'oshai'
        key = 'key' ////https://bintray.com/profile/edit
        publications = ['mavenProject']
        dryRun = false //[Default: false] Whether to run this as dry-run, without deploying
        publish = true //[Default: false] Whether version should be auto published after an upload
        pkg {
            repo = 'jasync-sql'
            name = 'jasync-sql'
            userOrg = 'jasync-sql'
            licenses = ['Apache-2.0']
            vcsUrl = 'https://github.com/jasync-sql/jasync-sql.git'
            websiteUrl = 'https://github.com/jasync-sql/jasync-sql'
            issueTrackerUrl = 'https://github.com/jasync-sql/jasync-sql/issues'
            publicDownloadNumbers = true
            githubRepo = 'jasync-sql/jasync-sql'
            githubReleaseNotesFile = 'CHANGELOG.md'
            version {
                name = project.version
                desc = "jasync-sql - Async, Netty based, JVM database drivers for PostgreSQL and MySQL written in Kotlin"
                released = new Date()
            }
        }
    }


}
task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.enabled false
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}
